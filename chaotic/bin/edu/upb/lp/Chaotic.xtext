grammar edu.upb.lp.Chaotic with org.eclipse.xtext.common.Terminals

generate chaotic "http://www.upb.edu/lp/Chaotic"

//Estructura del programa
Program:	
	userSection = UserSection
	channelSection = ChannelSection
	execution = ChatSection
;

UserSection:
	{UserSection} 'Usuarios conectados:'
	(users += UserDeclaration+ | 'Vaya, parece que no hay nadie.')
;

ChannelSection:
	{ChannelSection} 'Canales disponibles:'
	(channels += ChannelOperation+ | 'Vaya, parece que no hay canales adicionales.')
;

ChatSection:
	{ChatSection} 'Chat #General'
	'Hola muchachada!'
	body=InstructionBody
	'Mañana hay examen de compilación, nos vimo :p'
;

//Gramática para UserSection, Variables
UserDeclaration:
	'Saluden a' name=UserField 'el nuevo miembro de' '$' type=DataType '.'
;

UserField:
	'@' name=ID
;

//Gramática para ChannelSection
ChannelOperation:
	'Se ha creado un nuevo canal llamado' 
	'#' name=ID	':'
	body=InstructionBody
	'Esperemos sea de su agrado.'
;

ParamField:
	'$' type=DataType 'también llamado' name=ID
;

InstructionBody:
	{InstructionBody} 
	(asignations+=UserAsignation | prints+=PrintLine | ifs+=IfInstruction | whiles+=WhileInstruction | channels+=ChannelCall)*
;

//Operaciones - Body
UserAsignation:
	user=[UserField] 'ha cambiado su descripción a:' value=Expression'.'
;

PrintLine:
	'Que tal todo ' value=[UserField]'?'
;

IfInstruction:
	'ATENCION! Si'
	'<' condition=Expression '>' 
	'procederemos a:' 
	body=InstructionBody
	'Gracias por su atención.' 
;

WhileInstruction:
	'AVISO! Mientras'
	'<'condition=Expression'>' 
	'se procederá a:'
	body=InstructionBody
	'Gracias por su atención.'
;

ChannelCall:
	'Nada que ver su conversacion, vayan a' 
	'#'name=[ChannelOperation] 
	'y dejen de molestar aca'
;

//Tipos de Datos
DataType:
	name=( EnteroType | BoolType | CadenasType | DecType )
;

EnteroType:
	'Enteros'
;

BoolType:
	'Bools'
;

CadenasType:
	'Cadenas'
;

DecType:
	'Decimales'
;

//Expressions
Expression:
	first = ( SingleExpression | SingleOperatorExpression | UserDataReference ) second = TempExpression
;

TempExpression:
	(operador=PairOperator secondValue=Expression follow=TempExpression)?
;


SingleExpression:
	PrimLiteral | DerLiteral 
;

PrimLiteral:
	IntLiteral | DecLiteral | BoolLiteral
;

DerLiteral:
	CadenasLiteral
;

PairOperator: 
	Plus | Less | Mult | Div | And | Or | Equals | Greater | GreaterEq | Concat
;


SingleOperatorExpression:
	operator = (BoolNegation | IntNegative) expression=Expression
;


UserDataReference:
	'@' user=[UserField]
;

//Literals
IntLiteral:
	value = INT
;

DecLiteral:
	//Corrige esto
	value = INT'.'INT
;

BoolLiteral:
	value=('true' | 'false')
;

CadenasLiteral:
	value=STRING
;

//PairOperators
	//Numbers
	Plus:
		'+'
	;
	Less:
		'-'
	;
	Mult:
		'*'
	;
	Div:
		'/'
	;
	//Bools
	And:
		'y'
	;
	Or:
		'o'
	;
	Equals:
		'es igual a'
	;
	Greater:
		'le gana a' | 'le gane a'
	;
	GreaterEq:
		'le podria ganar a' | 'le pueda ganar a'
	;
	//Cadenas
	Concat:
		'junto a'
	;

//SingleOperators
BoolNegation:
	'Ignoren a ese'
;

IntNegative:
	'Salio medio negativo el'
;
