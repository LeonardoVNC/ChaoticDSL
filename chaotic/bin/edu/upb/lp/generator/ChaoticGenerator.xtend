/*
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import edu.upb.lp.chaotic.Program
import edu.upb.lp.chaotic.UserSection
import edu.upb.lp.chaotic.ChannelSection
import edu.upb.lp.chaotic.ChatSection
import edu.upb.lp.chaotic.DataType
import edu.upb.lp.chaotic.InstructionBody
import edu.upb.lp.chaotic.UserAsignation
import edu.upb.lp.chaotic.PrintLine
import edu.upb.lp.chaotic.IfInstruction
import edu.upb.lp.chaotic.WhileInstruction
import edu.upb.lp.chaotic.ChannelCall
import edu.upb.lp.chaotic.BanException

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
 

	
class ChaoticGenerator extends AbstractGenerator {
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val program = resource.allContents.head as Program;
		fsa.generateFile(program.name+".java", generateProgram(program))
	}
	
	
	def generateProgram(Program p) 
	'''
		public class «p.name» {
			«generateFields(p.userSection)»
			
			«generateMethods(p.channelSection)»
			
			«generateMain(p.execution)»
		}
	'''
	
	
	def generateFields(UserSection us) 
	'''
	«
	us.users.map
	[userDeclaration | 
	"private static " + typeMap.get(userDeclaration.type ) + " " + userDeclaration.name+";"]
	.join('\n')
	»
	'''
	
	
	def generateMethods(ChannelSection cs)
	'''
	«
	cs.getChannels.map
	[channelOperation | 
	"private static void " + channelOperation.name + "() throws Exception {\n" + generateBody(channelOperation.body) + "\n}"].	
	join('\n')
	»
	'''
	
	
	def generateBody(InstructionBody body)
	'''
	'''
	
	dispatch def generateInstruction(UserAsignation userAsignation)'''user asignation'''
	dispatch def generateInstruction(PrintLine print)'''print'''
	dispatch def generateInstruction(IfInstruction ifs)'''if'''
	dispatch def generateInstruction(WhileInstruction whiles)'''while'''
	dispatch def generateInstruction(ChannelCall channelCall)'''channel'''
	dispatch def generateInstruction(BanException exception)'''exception'''
	
	def generateMain(ChatSection cs)
	'''
	'''
	
	val typeMap = newHashMap(
		DataType.ENTERO_TYPE -> "int",
		DataType.DEC_TYPE -> "double",
		DataType.CADENAS_TYPE -> "String",
		DataType.BOOL_TYPE -> "Boolean"
	);

}
