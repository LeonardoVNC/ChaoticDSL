/*
 * generated by Xtext 2.39.0
 */
package edu.upb.lp.validation;

import java.util.HashSet;
import java.util.Set;

import org.eclipse.xtext.validation.Check;

import edu.upb.lp.chaotic.ChannelCall;
import edu.upb.lp.chaotic.ChannelOperation;
import edu.upb.lp.chaotic.ChannelSection;
import edu.upb.lp.chaotic.ChatSection;
import edu.upb.lp.chaotic.Program;
import edu.upb.lp.chaotic.UserDeclaration;
import edu.upb.lp.chaotic.UserSection;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class ChaoticValidator extends AbstractChaoticValidator {
	@Check
	public void checkUsersID(UserSection us) {
	    Set<String> users = new HashSet<>();
	    for (UserDeclaration userDeclaration : us.getUsers()) {
	        String currentID = userDeclaration.getName().getName();
	        if (users.contains(currentID)) {
	            error("El nombre de usuario \"" + currentID + "\" ya está siento utilizado.", 
	            		userDeclaration.getName(), null);
	        } else {
	            users.add(currentID);
	        }
	    }
	}
	
	@Check
	public void checkChannelsID(ChannelSection cs) {
		Set<String> channels = new HashSet<>();
		for (ChannelOperation channelOperation : cs.getChannels()) {
			String currentChannelID = channelOperation.getName();
			if (channels.contains(currentChannelID)) {
				error("El nombre \"" + currentChannelID + "\" ya está siendo utilizado por otro canal.",
						channelOperation, null);
			} else {
				channels.add(currentChannelID);
			}
		}
	}
	
	@Check
	public void checkChannelUsage(Program p) {
		ChannelSection cns = p.getChannelSection();
		ChatSection cts = p.getExecution();
		Set<ChannelOperation> declaredChannels = new HashSet<>();
		for (ChannelOperation channelOperation : cns.getChannels()) {
			declaredChannels.add(channelOperation);
		}
		for (ChannelCall channelCall : cts.getBody().getChannels()) {
			ChannelOperation currentChannel = channelCall.getName();
			if (declaredChannels.contains(currentChannel)) {
				declaredChannels.remove(currentChannel);
			}
		}
		for (ChannelOperation notUsedChannel : declaredChannels) {
			warning("El canal #" + notUsedChannel.getName() + " no está siendo utilizado.",
					notUsedChannel, null);
		}
	}
	
	@Check
	public void checkChannelBody(ChannelOperation c) {
		int instruccions = c.getBody().getAsignations().size();
		instruccions += c.getBody().getPrints().size();
		instruccions += c.getBody().getIfs().size();
		instruccions += c.getBody().getWhiles().size();
		instruccions += c.getBody().getChannels().size();
		if (instruccions == 0) {
			warning("El cuerpo del canal #" + c.getName() + " está vació.", c, null);
		}
	}
	
}


